// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: raft_internal.proto

package etcdserverpb

import (
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/golang/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
	membershippb "yunli.com/jobpool/api/v2/membershippb"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type RequestHeader struct {
	ID uint64 `protobuf:"varint,1,opt,name=ID,proto3" json:"ID,omitempty"`
	// username is a username that is associated with an auth token of gRPC connection
	Username string `protobuf:"bytes,2,opt,name=username,proto3" json:"username,omitempty"`
	// auth_revision is a revision number of auth.authStore. It is not related to mvcc
	AuthRevision         uint64   `protobuf:"varint,3,opt,name=auth_revision,json=authRevision,proto3" json:"auth_revision,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RequestHeader) Reset()         { *m = RequestHeader{} }
func (m *RequestHeader) String() string { return proto.CompactTextString(m) }
func (*RequestHeader) ProtoMessage()    {}
func (*RequestHeader) Descriptor() ([]byte, []int) {
	return fileDescriptor_b4c9a9be0cfca103, []int{0}
}
func (m *RequestHeader) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RequestHeader) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RequestHeader.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RequestHeader) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RequestHeader.Merge(m, src)
}
func (m *RequestHeader) XXX_Size() int {
	return m.Size()
}
func (m *RequestHeader) XXX_DiscardUnknown() {
	xxx_messageInfo_RequestHeader.DiscardUnknown(m)
}

var xxx_messageInfo_RequestHeader proto.InternalMessageInfo

// An InternalRaftRequest is the union of all requests which can be
// sent via raft.
type InternalRaftRequest struct {
	Header                   *RequestHeader                            `protobuf:"bytes,100,opt,name=header,proto3" json:"header,omitempty"`
	ID                       uint64                                    `protobuf:"varint,1,opt,name=ID,proto3" json:"ID,omitempty"`
	V2                       *Request                                  `protobuf:"bytes,2,opt,name=v2,proto3" json:"v2,omitempty"`
	Range                    *RangeRequest                             `protobuf:"bytes,3,opt,name=range,proto3" json:"range,omitempty"`
	Put                      *PutRequest                               `protobuf:"bytes,4,opt,name=put,proto3" json:"put,omitempty"`
	DeleteRange              *DeleteRangeRequest                       `protobuf:"bytes,5,opt,name=delete_range,json=deleteRange,proto3" json:"delete_range,omitempty"`
	Txn                      *TxnRequest                               `protobuf:"bytes,6,opt,name=txn,proto3" json:"txn,omitempty"`
	Compaction               *CompactionRequest                        `protobuf:"bytes,7,opt,name=compaction,proto3" json:"compaction,omitempty"`
	LeaseGrant               *LeaseGrantRequest                        `protobuf:"bytes,8,opt,name=lease_grant,json=leaseGrant,proto3" json:"lease_grant,omitempty"`
	LeaseRevoke              *LeaseRevokeRequest                       `protobuf:"bytes,9,opt,name=lease_revoke,json=leaseRevoke,proto3" json:"lease_revoke,omitempty"`
	Alarm                    *AlarmRequest                             `protobuf:"bytes,10,opt,name=alarm,proto3" json:"alarm,omitempty"`
	LeaseCheckpoint          *LeaseCheckpointRequest                   `protobuf:"bytes,11,opt,name=lease_checkpoint,json=leaseCheckpoint,proto3" json:"lease_checkpoint,omitempty"`
	AuthEnable               *AuthEnableRequest                        `protobuf:"bytes,1000,opt,name=auth_enable,json=authEnable,proto3" json:"auth_enable,omitempty"`
	AuthDisable              *AuthDisableRequest                       `protobuf:"bytes,1011,opt,name=auth_disable,json=authDisable,proto3" json:"auth_disable,omitempty"`
	AuthStatus               *AuthStatusRequest                        `protobuf:"bytes,1013,opt,name=auth_status,json=authStatus,proto3" json:"auth_status,omitempty"`
	Authenticate             *InternalAuthenticateRequest              `protobuf:"bytes,1012,opt,name=authenticate,proto3" json:"authenticate,omitempty"`
	AuthUserAdd              *AuthUserAddRequest                       `protobuf:"bytes,1100,opt,name=auth_user_add,json=authUserAdd,proto3" json:"auth_user_add,omitempty"`
	AuthUserDelete           *AuthUserDeleteRequest                    `protobuf:"bytes,1101,opt,name=auth_user_delete,json=authUserDelete,proto3" json:"auth_user_delete,omitempty"`
	AuthUserGet              *AuthUserGetRequest                       `protobuf:"bytes,1102,opt,name=auth_user_get,json=authUserGet,proto3" json:"auth_user_get,omitempty"`
	AuthUserChangePassword   *AuthUserChangePasswordRequest            `protobuf:"bytes,1103,opt,name=auth_user_change_password,json=authUserChangePassword,proto3" json:"auth_user_change_password,omitempty"`
	AuthUserGrantRole        *AuthUserGrantRoleRequest                 `protobuf:"bytes,1104,opt,name=auth_user_grant_role,json=authUserGrantRole,proto3" json:"auth_user_grant_role,omitempty"`
	AuthUserRevokeRole       *AuthUserRevokeRoleRequest                `protobuf:"bytes,1105,opt,name=auth_user_revoke_role,json=authUserRevokeRole,proto3" json:"auth_user_revoke_role,omitempty"`
	AuthUserList             *AuthUserListRequest                      `protobuf:"bytes,1106,opt,name=auth_user_list,json=authUserList,proto3" json:"auth_user_list,omitempty"`
	AuthRoleList             *AuthRoleListRequest                      `protobuf:"bytes,1107,opt,name=auth_role_list,json=authRoleList,proto3" json:"auth_role_list,omitempty"`
	AuthRoleAdd              *AuthRoleAddRequest                       `protobuf:"bytes,1200,opt,name=auth_role_add,json=authRoleAdd,proto3" json:"auth_role_add,omitempty"`
	AuthRoleDelete           *AuthRoleDeleteRequest                    `protobuf:"bytes,1201,opt,name=auth_role_delete,json=authRoleDelete,proto3" json:"auth_role_delete,omitempty"`
	AuthRoleGet              *AuthRoleGetRequest                       `protobuf:"bytes,1202,opt,name=auth_role_get,json=authRoleGet,proto3" json:"auth_role_get,omitempty"`
	AuthRoleGrantPermission  *AuthRoleGrantPermissionRequest           `protobuf:"bytes,1203,opt,name=auth_role_grant_permission,json=authRoleGrantPermission,proto3" json:"auth_role_grant_permission,omitempty"`
	AuthRoleRevokePermission *AuthRoleRevokePermissionRequest          `protobuf:"bytes,1204,opt,name=auth_role_revoke_permission,json=authRoleRevokePermission,proto3" json:"auth_role_revoke_permission,omitempty"`
	ClusterVersionSet        *membershippb.ClusterVersionSetRequest    `protobuf:"bytes,1300,opt,name=cluster_version_set,json=clusterVersionSet,proto3" json:"cluster_version_set,omitempty"`
	ClusterMemberAttrSet     *membershippb.ClusterMemberAttrSetRequest `protobuf:"bytes,1301,opt,name=cluster_member_attr_set,json=clusterMemberAttrSet,proto3" json:"cluster_member_attr_set,omitempty"`
	DowngradeInfoSet         *membershippb.DowngradeInfoSetRequest     `protobuf:"bytes,1302,opt,name=downgrade_info_set,json=downgradeInfoSet,proto3" json:"downgrade_info_set,omitempty"`
	// schedule after 1400
	SchedulePlanList    *SchedulePlanListRequest    `protobuf:"bytes,1400,opt,name=schedule_plan_list,json=schedulePlanList,proto3" json:"schedule_plan_list,omitempty"`
	SchedulePlanAdd     *SchedulePlanAddRequest     `protobuf:"bytes,1401,opt,name=schedule_plan_add,json=schedulePlanAdd,proto3" json:"schedule_plan_add,omitempty"`
	SchedulePlanUpdate  *SchedulePlanUpdateRequest  `protobuf:"bytes,1402,opt,name=schedule_plan_update,json=schedulePlanUpdate,proto3" json:"schedule_plan_update,omitempty"`
	SchedulePlanDelete  *SchedulePlanDeleteRequest  `protobuf:"bytes,1403,opt,name=schedule_plan_delete,json=schedulePlanDelete,proto3" json:"schedule_plan_delete,omitempty"`
	SchedulePlanDetail  *SchedulePlanDetailRequest  `protobuf:"bytes,1404,opt,name=schedule_plan_detail,json=schedulePlanDetail,proto3" json:"schedule_plan_detail,omitempty"`
	SchedulePlanOnline  *SchedulePlanOnlineRequest  `protobuf:"bytes,1405,opt,name=schedule_plan_online,json=schedulePlanOnline,proto3" json:"schedule_plan_online,omitempty"`
	SchedulePlanOffline *SchedulePlanOfflineRequest `protobuf:"bytes,1406,opt,name=schedule_plan_offline,json=schedulePlanOffline,proto3" json:"schedule_plan_offline,omitempty"`
	// job
	ScheduleJobAdd          *ScheduleJobAddRequest          `protobuf:"bytes,1411,opt,name=schedule_job_add,json=scheduleJobAdd,proto3" json:"schedule_job_add,omitempty"`
	ScheduleJobList         *ScheduleJobListRequest         `protobuf:"bytes,1412,opt,name=schedule_job_list,json=scheduleJobList,proto3" json:"schedule_job_list,omitempty"`
	ScheduleJobStatusUpdate *ScheduleJobStatusUpdateRequest `protobuf:"bytes,1413,opt,name=schedule_job_status_update,json=scheduleJobStatusUpdate,proto3" json:"schedule_job_status_update,omitempty"`
	ScheduleJobDelete       *ScheduleJobDeleteRequest       `protobuf:"bytes,1414,opt,name=schedule_job_delete,json=scheduleJobDelete,proto3" json:"schedule_job_delete,omitempty"`
	ScheduleJobDetail       *ScheduleJobDetailRequest       `protobuf:"bytes,1415,opt,name=schedule_job_detail,json=scheduleJobDetail,proto3" json:"schedule_job_detail,omitempty"`
	ScheduleJobExist        *ScheduleJobExistRequest        `protobuf:"bytes,1416,opt,name=schedule_job_exist,json=scheduleJobExist,proto3" json:"schedule_job_exist,omitempty"`
	// eval
	ScheduleEvalAdd          *ScheduleEvalAddRequest          `protobuf:"bytes,1420,opt,name=schedule_eval_add,json=scheduleEvalAdd,proto3" json:"schedule_eval_add,omitempty"`
	ScheduleEvalList         *ScheduleEvalListRequest         `protobuf:"bytes,1421,opt,name=schedule_eval_list,json=scheduleEvalList,proto3" json:"schedule_eval_list,omitempty"`
	ScheduleEvalStatusUpdate *ScheduleEvalStatusUpdateRequest `protobuf:"bytes,1422,opt,name=schedule_eval_status_update,json=scheduleEvalStatusUpdate,proto3" json:"schedule_eval_status_update,omitempty"`
	ScheduleEvalDelete       *ScheduleEvalDeleteRequest       `protobuf:"bytes,1423,opt,name=schedule_eval_delete,json=scheduleEvalDelete,proto3" json:"schedule_eval_delete,omitempty"`
	ScheduleEvalDetail       *ScheduleEvalDetailRequest       `protobuf:"bytes,1424,opt,name=schedule_eval_detail,json=scheduleEvalDetail,proto3" json:"schedule_eval_detail,omitempty"`
	// alloc
	ScheduleAllocationAdd          *ScheduleAllocationAddRequest          `protobuf:"bytes,1430,opt,name=schedule_allocation_add,json=scheduleAllocationAdd,proto3" json:"schedule_allocation_add,omitempty"`
	ScheduleAllocationList         *ScheduleAllocationListRequest         `protobuf:"bytes,1431,opt,name=schedule_allocation_list,json=scheduleAllocationList,proto3" json:"schedule_allocation_list,omitempty"`
	ScheduleAllocationStatusUpdate *ScheduleAllocationStatusUpdateRequest `protobuf:"bytes,1432,opt,name=schedule_allocation_status_update,json=scheduleAllocationStatusUpdate,proto3" json:"schedule_allocation_status_update,omitempty"`
	ScheduleAllocationDelete       *ScheduleAllocationDeleteRequest       `protobuf:"bytes,1433,opt,name=schedule_allocation_delete,json=scheduleAllocationDelete,proto3" json:"schedule_allocation_delete,omitempty"`
	ScheduleAllocationDetail       *ScheduleAllocationDetailRequest       `protobuf:"bytes,1434,opt,name=schedule_allocation_detail,json=scheduleAllocationDetail,proto3" json:"schedule_allocation_detail,omitempty"`
	ScheduleSimpleAllocationList   *ScheduleAllocationListRequest         `protobuf:"bytes,1435,opt,name=schedule_simple_allocation_list,json=scheduleSimpleAllocationList,proto3" json:"schedule_simple_allocation_list,omitempty"`
	// plan alloc
	PlanAllocationEnqueue *PlanAllocationEnqueueRequest `protobuf:"bytes,1436,opt,name=plan_allocation_enqueue,json=planAllocationEnqueue,proto3" json:"plan_allocation_enqueue,omitempty"`
	// eval queue
	ScheduleEvalDequeue *ScheduleEvalDequeueRequest `protobuf:"bytes,1440,opt,name=schedule_eval_dequeue,json=scheduleEvalDequeue,proto3" json:"schedule_eval_dequeue,omitempty"`
	ScheduleEvalAck     *ScheduleEvalAckRequest     `protobuf:"bytes,1441,opt,name=schedule_eval_ack,json=scheduleEvalAck,proto3" json:"schedule_eval_ack,omitempty"`
	ScheduleEvalNack    *ScheduleEvalNackRequest    `protobuf:"bytes,1442,opt,name=schedule_eval_nack,json=scheduleEvalNack,proto3" json:"schedule_eval_nack,omitempty"`
	// namespace
	ScheduleNamespaceAdd    *ScheduleNameSpaceAddRequest    `protobuf:"bytes,1450,opt,name=schedule_namespace_add,json=scheduleNamespaceAdd,proto3" json:"schedule_namespace_add,omitempty"`
	ScheduleNamespaceList   *ScheduleNameSpaceListRequest   `protobuf:"bytes,1451,opt,name=schedule_namespace_list,json=scheduleNamespaceList,proto3" json:"schedule_namespace_list,omitempty"`
	ScheduleNamespaceDelete *ScheduleNameSpaceDeleteRequest `protobuf:"bytes,1452,opt,name=schedule_namespace_delete,json=scheduleNamespaceDelete,proto3" json:"schedule_namespace_delete,omitempty"`
	ScheduleNamespaceDetail *ScheduleNameSpaceDetailRequest `protobuf:"bytes,1453,opt,name=schedule_namespace_detail,json=scheduleNamespaceDetail,proto3" json:"schedule_namespace_detail,omitempty"`
	ScheduleNamespaceUpdate *ScheduleNameSpaceUpdateRequest `protobuf:"bytes,1454,opt,name=schedule_namespace_update,json=scheduleNamespaceUpdate,proto3" json:"schedule_namespace_update,omitempty"`
	// node
	NodeAdd              *NodeAddRequest    `protobuf:"bytes,1500,opt,name=node_add,json=nodeAdd,proto3" json:"node_add,omitempty"`
	NodeList             *NodeListRequest   `protobuf:"bytes,1501,opt,name=node_list,json=nodeList,proto3" json:"node_list,omitempty"`
	NodeUpdate           *NodeUpdateRequest `protobuf:"bytes,1502,opt,name=node_update,json=nodeUpdate,proto3" json:"node_update,omitempty"`
	NodeDelete           *NodeDeleteRequest `protobuf:"bytes,1503,opt,name=node_delete,json=nodeDelete,proto3" json:"node_delete,omitempty"`
	NodeDetail           *NodeDetailRequest `protobuf:"bytes,1504,opt,name=node_detail,json=nodeDetail,proto3" json:"node_detail,omitempty"`
	XXX_NoUnkeyedLiteral struct{}           `json:"-"`
	XXX_unrecognized     []byte             `json:"-"`
	XXX_sizecache        int32              `json:"-"`
}

func (m *InternalRaftRequest) Reset()         { *m = InternalRaftRequest{} }
func (m *InternalRaftRequest) String() string { return proto.CompactTextString(m) }
func (*InternalRaftRequest) ProtoMessage()    {}
func (*InternalRaftRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_b4c9a9be0cfca103, []int{1}
}
func (m *InternalRaftRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *InternalRaftRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_InternalRaftRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *InternalRaftRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_InternalRaftRequest.Merge(m, src)
}
func (m *InternalRaftRequest) XXX_Size() int {
	return m.Size()
}
func (m *InternalRaftRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_InternalRaftRequest.DiscardUnknown(m)
}

var xxx_messageInfo_InternalRaftRequest proto.InternalMessageInfo

type EmptyResponse struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *EmptyResponse) Reset()         { *m = EmptyResponse{} }
func (m *EmptyResponse) String() string { return proto.CompactTextString(m) }
func (*EmptyResponse) ProtoMessage()    {}
func (*EmptyResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_b4c9a9be0cfca103, []int{2}
}
func (m *EmptyResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EmptyResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EmptyResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EmptyResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EmptyResponse.Merge(m, src)
}
func (m *EmptyResponse) XXX_Size() int {
	return m.Size()
}
func (m *EmptyResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_EmptyResponse.DiscardUnknown(m)
}

var xxx_messageInfo_EmptyResponse proto.InternalMessageInfo

// What is the difference between AuthenticateRequest (defined in rpc.proto) and InternalAuthenticateRequest?
// InternalAuthenticateRequest has a member that is filled by etcdserver and shouldn't be user-facing.
// For avoiding misusage the field, we have an internal version of AuthenticateRequest.
type InternalAuthenticateRequest struct {
	Name     string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Password string `protobuf:"bytes,2,opt,name=password,proto3" json:"password,omitempty"`
	// simple_token is generated in API layer (etcdserver/v3_server.go)
	SimpleToken          string   `protobuf:"bytes,3,opt,name=simple_token,json=simpleToken,proto3" json:"simple_token,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *InternalAuthenticateRequest) Reset()         { *m = InternalAuthenticateRequest{} }
func (m *InternalAuthenticateRequest) String() string { return proto.CompactTextString(m) }
func (*InternalAuthenticateRequest) ProtoMessage()    {}
func (*InternalAuthenticateRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_b4c9a9be0cfca103, []int{3}
}
func (m *InternalAuthenticateRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *InternalAuthenticateRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_InternalAuthenticateRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *InternalAuthenticateRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_InternalAuthenticateRequest.Merge(m, src)
}
func (m *InternalAuthenticateRequest) XXX_Size() int {
	return m.Size()
}
func (m *InternalAuthenticateRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_InternalAuthenticateRequest.DiscardUnknown(m)
}

var xxx_messageInfo_InternalAuthenticateRequest proto.InternalMessageInfo

func init() {
	proto.RegisterType((*RequestHeader)(nil), "etcdserverpb.RequestHeader")
	proto.RegisterType((*InternalRaftRequest)(nil), "etcdserverpb.InternalRaftRequest")
	proto.RegisterType((*EmptyResponse)(nil), "etcdserverpb.EmptyResponse")
	proto.RegisterType((*InternalAuthenticateRequest)(nil), "etcdserverpb.InternalAuthenticateRequest")
}

func init() { proto.RegisterFile("raft_internal.proto", fileDescriptor_b4c9a9be0cfca103) }

var fileDescriptor_b4c9a9be0cfca103 = []byte{
	// 1768 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x98, 0x49, 0x73, 0x1c, 0x45,
	0x16, 0xc7, 0xdd, 0xf2, 0x26, 0x65, 0xc9, 0x5a, 0x52, 0x92, 0x55, 0x96, 0x3d, 0xb2, 0x2c, 0x8f,
	0x67, 0x64, 0xcf, 0x58, 0x9e, 0x90, 0x2f, 0x13, 0x31, 0x87, 0x99, 0x1e, 0x49, 0x61, 0xcb, 0x61,
	0x64, 0xd1, 0xb2, 0x81, 0x80, 0x20, 0xda, 0xd9, 0x55, 0x29, 0xa9, 0xac, 0xea, 0xaa, 0x72, 0x65,
	0x76, 0x5b, 0x9c, 0x38, 0xb0, 0x1e, 0xd8, 0x0e, 0x60, 0xcc, 0x72, 0x00, 0x8e, 0x6c, 0xc1, 0xf6,
	0x1d, 0xf0, 0x81, 0xc5, 0xc0, 0x95, 0xc5, 0x98, 0x0b, 0x77, 0x20, 0x82, 0x3d, 0x88, 0x5c, 0x2a,
	0x2b, 0xb3, 0x3b, 0xab, 0xa5, 0xe0, 0xa6, 0x7e, 0xef, 0xe5, 0xef, 0xbd, 0xaa, 0xf7, 0x7f, 0xaf,
	0x4a, 0x05, 0x86, 0x52, 0xb4, 0x42, 0xab, 0x41, 0x44, 0x71, 0x1a, 0xa1, 0x70, 0x3a, 0x49, 0x63,
	0x1a, 0xc3, 0x5e, 0x4c, 0x3d, 0x9f, 0xe0, 0xb4, 0x89, 0xd3, 0xa4, 0x36, 0x36, 0xbc, 0x1a, 0xaf,
	0xc6, 0xdc, 0x71, 0x82, 0xfd, 0x25, 0x62, 0xc6, 0x06, 0xf2, 0x18, 0x69, 0xe9, 0x49, 0x13, 0x4f,
	0xfe, 0x79, 0xf4, 0x52, 0x5c, 0x4b, 0xe2, 0x38, 0x3c, 0x81, 0x92, 0xe0, 0x44, 0x1d, 0xd7, 0x6b,
	0x38, 0x25, 0x6b, 0x41, 0x92, 0xd4, 0xb4, 0x1f, 0x22, 0x74, 0xf2, 0x22, 0xd8, 0x53, 0xc1, 0x97,
	0x1b, 0x98, 0xd0, 0xd3, 0x18, 0xf9, 0x38, 0x85, 0x7d, 0xa0, 0x6b, 0x61, 0xce, 0x2d, 0x4d, 0x94,
	0xa6, 0x76, 0x54, 0xba, 0x16, 0xe6, 0xe0, 0x18, 0xe8, 0x6e, 0x10, 0x56, 0x5d, 0x1d, 0xbb, 0x5d,
	0x13, 0xa5, 0xa9, 0x9e, 0x8a, 0xfa, 0x0d, 0x0f, 0x83, 0x3d, 0xa8, 0x41, 0xd7, 0xaa, 0x29, 0x6e,
	0x06, 0x24, 0x88, 0x23, 0x77, 0x3b, 0x3f, 0xd6, 0xcb, 0x8c, 0x15, 0x69, 0x9b, 0x7c, 0xff, 0x38,
	0x18, 0x5a, 0x90, 0x17, 0x58, 0x41, 0x2b, 0x54, 0xa6, 0x83, 0x27, 0xc1, 0xae, 0x35, 0x9e, 0xd2,
	0xf5, 0x27, 0x4a, 0x53, 0xce, 0xcc, 0xfe, 0x69, 0xfd, 0xb2, 0xa7, 0x8d, 0xaa, 0x2a, 0x32, 0xb4,
	0xad, 0xba, 0x23, 0xa0, 0xab, 0x39, 0xc3, 0xeb, 0x72, 0x66, 0x46, 0xac, 0x80, 0x4a, 0x57, 0x73,
	0x06, 0xfe, 0x0b, 0xec, 0x4c, 0x51, 0xb4, 0x8a, 0x79, 0x81, 0xce, 0xcc, 0x58, 0x4b, 0x24, 0x73,
	0x65, 0xe1, 0x22, 0x10, 0x1e, 0x03, 0xdb, 0x93, 0x06, 0x75, 0x77, 0xf0, 0x78, 0xd7, 0x8c, 0x5f,
	0x6a, 0x64, 0x17, 0x51, 0x61, 0x41, 0x70, 0x16, 0xf4, 0xfa, 0x38, 0xc4, 0x14, 0x57, 0x45, 0x92,
	0x9d, 0xfc, 0xd0, 0x84, 0x79, 0x68, 0x8e, 0x47, 0x18, 0xa9, 0x1c, 0x3f, 0xb7, 0xb1, 0x84, 0x74,
	0x23, 0x72, 0x77, 0xd9, 0x12, 0x9e, 0xdf, 0x88, 0x54, 0x42, 0xba, 0x11, 0xc1, 0xff, 0x02, 0xe0,
	0xc5, 0xf5, 0x04, 0x79, 0x94, 0xdd, 0xf4, 0xdd, 0xfc, 0xc8, 0x41, 0xf3, 0xc8, 0xac, 0xf2, 0x67,
	0x27, 0xb5, 0x23, 0xf0, 0x7f, 0xc0, 0x09, 0x31, 0x22, 0xb8, 0xba, 0x9a, 0xa2, 0x88, 0xba, 0xdd,
	0x36, 0xc2, 0x59, 0x16, 0x70, 0x8a, 0xf9, 0x15, 0x21, 0x54, 0x26, 0x76, 0xcd, 0x82, 0x90, 0xe2,
	0x66, 0xbc, 0x8e, 0xdd, 0x1e, 0xdb, 0x35, 0x73, 0x44, 0x85, 0x07, 0xa8, 0x6b, 0x0e, 0x73, 0x1b,
	0x6b, 0x0b, 0x0a, 0x51, 0x5a, 0x77, 0x81, 0xad, 0x2d, 0x65, 0xe6, 0x52, 0x6d, 0xe1, 0x81, 0xf0,
	0x1c, 0x18, 0x10, 0x69, 0xbd, 0x35, 0xec, 0xad, 0x27, 0x71, 0x10, 0x51, 0xd7, 0xe1, 0x87, 0xff,
	0x6a, 0x49, 0x3d, 0xab, 0x82, 0x32, 0x4c, 0x7f, 0x68, 0xda, 0x61, 0x19, 0x38, 0x5c, 0xc2, 0x38,
	0x42, 0xb5, 0x10, 0xbb, 0xdf, 0x5a, 0x6f, 0x66, 0xb9, 0x41, 0xd7, 0xe6, 0x79, 0x80, 0xba, 0x15,
	0x48, 0x99, 0xe0, 0x1c, 0xe0, 0x82, 0xaf, 0xfa, 0x01, 0xe1, 0x8c, 0xef, 0x76, 0xdb, 0xee, 0x05,
	0x63, 0xcc, 0x89, 0x08, 0x75, 0x2f, 0x50, 0x6e, 0x53, 0x85, 0x10, 0x8a, 0x68, 0x83, 0xb8, 0x3f,
	0x14, 0x16, 0xb2, 0xcc, 0x03, 0x8c, 0x42, 0x84, 0x09, 0x2e, 0x8a, 0x42, 0x70, 0x44, 0x03, 0x0f,
	0x51, 0xec, 0x7e, 0x2f, 0x18, 0x47, 0x4d, 0x46, 0x36, 0x8b, 0x65, 0x2d, 0x34, 0xa3, 0x19, 0xe7,
	0xe1, 0xbc, 0x1c, 0x6f, 0x36, 0xef, 0x55, 0xe4, 0xfb, 0xee, 0x07, 0xdd, 0x45, 0x57, 0x76, 0x81,
	0xe0, 0xb4, 0xec, 0xfb, 0xc6, 0x95, 0x49, 0x1b, 0x5c, 0x04, 0x03, 0x39, 0x46, 0x48, 0xde, 0xfd,
	0x50, 0x90, 0x0e, 0xdb, 0x49, 0x72, 0x56, 0x24, 0xac, 0x0f, 0x19, 0x66, 0xb3, 0xac, 0x55, 0x4c,
	0xdd, 0x8f, 0x3a, 0x96, 0x75, 0x0a, 0xd3, 0xb6, 0xb2, 0x4e, 0x61, 0x0a, 0x57, 0xc1, 0xbe, 0x1c,
	0xe3, 0xad, 0xb1, 0x21, 0xac, 0x26, 0x88, 0x90, 0x2b, 0x71, 0xea, 0xbb, 0x1f, 0x0b, 0xe4, 0x3f,
	0xec, 0xc8, 0x59, 0x1e, 0xbd, 0x24, 0x83, 0x33, 0xfa, 0x5e, 0x64, 0x75, 0xc3, 0xbb, 0xc0, 0xb0,
	0x56, 0x2f, 0x9b, 0x9e, 0x6a, 0x1a, 0x87, 0xd8, 0xbd, 0x21, 0x72, 0xfc, 0xad, 0xa0, 0x6c, 0x3e,
	0x79, 0x71, 0xae, 0x96, 0x41, 0xd4, 0xea, 0x81, 0xf7, 0x80, 0x91, 0x9c, 0x2c, 0x06, 0x51, 0xa0,
	0x3f, 0x11, 0xe8, 0xbf, 0xdb, 0xd1, 0x72, 0x22, 0x35, 0x36, 0x44, 0x6d, 0x2e, 0x78, 0x1a, 0xf4,
	0xe5, 0xf0, 0x30, 0x20, 0xd4, 0xfd, 0x54, 0x50, 0x0f, 0xd9, 0xa9, 0x67, 0x03, 0x42, 0x0d, 0x1d,
	0x65, 0x46, 0x45, 0x62, 0xa5, 0x09, 0xd2, 0x67, 0x85, 0x24, 0x96, 0xba, 0x8d, 0x94, 0x19, 0x55,
	0xeb, 0x39, 0x89, 0x29, 0xf2, 0xad, 0x9e, 0xa2, 0xd6, 0xb3, 0x33, 0xad, 0x8a, 0x94, 0x36, 0xa5,
	0x48, 0x8e, 0x91, 0x8a, 0x7c, 0xbb, 0xa7, 0x48, 0x91, 0xec, 0x94, 0x45, 0x91, 0xb9, 0xd9, 0x2c,
	0x8b, 0x29, 0xf2, 0x9d, 0x8e, 0x65, 0xb5, 0x2a, 0x52, 0xda, 0xe0, 0x25, 0x30, 0xa6, 0x61, 0xb8,
	0x50, 0x12, 0x9c, 0xd6, 0x03, 0xc2, 0x9f, 0xad, 0xef, 0x0a, 0xe6, 0x3f, 0x0b, 0x98, 0x2c, 0x7c,
	0x49, 0x45, 0x67, 0xfc, 0x51, 0x64, 0xf7, 0xc3, 0x3a, 0xd8, 0x9f, 0xe7, 0x92, 0xd2, 0xd1, 0x92,
	0xbd, 0x27, 0x92, 0x1d, 0xb7, 0x27, 0x13, 0x2a, 0x69, 0xcf, 0xe6, 0xa2, 0x82, 0x00, 0x78, 0x27,
	0x18, 0xf2, 0xc2, 0x06, 0xa1, 0x38, 0xad, 0x36, 0x71, 0xca, 0x4c, 0x55, 0x82, 0xa9, 0xfb, 0x34,
	0x90, 0x23, 0xa0, 0xbf, 0xa4, 0x4c, 0xcf, 0x8a, 0xc8, 0x3b, 0x44, 0xe0, 0x72, 0x7e, 0xb7, 0x06,
	0xbd, 0x56, 0x0f, 0x44, 0x60, 0x34, 0x03, 0x0b, 0x46, 0x15, 0x51, 0x9a, 0x72, 0xf8, 0x33, 0x40,
	0xae, 0x3f, 0x1b, 0xfc, 0x36, 0x6e, 0x2b, 0x53, 0x9a, 0x6a, 0xfc, 0x61, 0xcf, 0xe2, 0x84, 0xe7,
	0x01, 0xf4, 0xe3, 0x2b, 0xd1, 0x6a, 0x8a, 0x7c, 0x5c, 0x0d, 0xa2, 0x95, 0x98, 0xd3, 0xaf, 0x0a,
	0xfa, 0x11, 0x93, 0x3e, 0x97, 0x05, 0x2e, 0x44, 0x2b, 0xb1, 0x46, 0x1e, 0xf0, 0x5b, 0x1c, 0x8c,
	0x4a, 0xbc, 0x35, 0xec, 0x37, 0x42, 0x5c, 0x4d, 0x42, 0x14, 0x89, 0xc1, 0xf8, 0x31, 0xa3, 0x1a,
	0xf7, 0x7d, 0x59, 0x06, 0x2e, 0x85, 0x28, 0xd2, 0x87, 0x63, 0x80, 0xb4, 0x38, 0xe0, 0xed, 0x60,
	0xd0, 0xa4, 0xb2, 0x21, 0xf9, 0x09, 0xd8, 0x9e, 0x90, 0x3a, 0x54, 0x1b, 0x94, 0x7e, 0x62, 0xda,
	0xe1, 0xdd, 0x60, 0xd8, 0x44, 0x36, 0x12, 0x9f, 0x3d, 0x5d, 0x7e, 0x06, 0xb6, 0x1d, 0xa3, 0x53,
	0x2f, 0xf0, 0x40, 0xb5, 0x63, 0x48, 0x9b, 0xab, 0x9d, 0x2d, 0x87, 0xf1, 0x97, 0x4d, 0xd9, 0xe6,
	0x40, 0x1a, 0x6c, 0x39, 0x94, 0x16, 0x36, 0x45, 0x41, 0xe8, 0xfe, 0xba, 0x05, 0x36, 0x0b, 0x2c,
	0x60, 0x33, 0x57, 0x3b, 0x3b, 0x8e, 0xc2, 0x20, 0xc2, 0xee, 0x6f, 0x9b, 0xb2, 0xcf, 0xf1, 0x40,
	0x2b, 0x5b, 0xb8, 0xe0, 0xbd, 0x60, 0xa4, 0x85, 0xbd, 0xb2, 0xc2, 0xe1, 0xbf, 0x0b, 0xf8, 0x54,
	0x07, 0xb8, 0x88, 0xcc, 0xe8, 0x43, 0xa4, 0xdd, 0xc7, 0x76, 0x9f, 0xc2, 0x5f, 0x8a, 0x6b, 0x5c,
	0x20, 0x0f, 0x38, 0xb6, 0xdd, 0x97, 0x91, 0xcf, 0xc4, 0x35, 0x4d, 0x1f, 0x7d, 0xc4, 0x30, 0x1b,
	0x8a, 0x63, 0x3c, 0x2e, 0xe3, 0x07, 0x9d, 0x4e, 0x8a, 0x3b, 0x13, 0xd7, 0x74, 0x15, 0xf7, 0x13,
	0xd3, 0xce, 0xf6, 0xa0, 0x81, 0x14, 0xaf, 0x44, 0x99, 0xee, 0x1e, 0x72, 0x6c, 0x7b, 0x50, 0x63,
	0x8b, 0xb7, 0x21, 0x53, 0x7c, 0xa3, 0xc4, 0xee, 0x67, 0x8b, 0xc9, 0xc8, 0x25, 0x05, 0xf8, 0xb0,
	0x63, 0x7b, 0x36, 0x6b, 0x49, 0x4c, 0xfd, 0x0d, 0x92, 0x56, 0x8f, 0x05, 0xcc, 0xd5, 0xf7, 0xc8,
	0xe6, 0x60, 0x5d, 0x7c, 0x26, 0x98, 0x6b, 0x4f, 0x5f, 0x1c, 0x0c, 0x8c, 0x37, 0xd8, 0x1d, 0x7f,
	0xd4, 0xe9, 0xb4, 0x38, 0xce, 0xc4, 0xb5, 0xf9, 0x0d, 0xdb, 0xe2, 0xc8, 0x1c, 0x46, 0x1b, 0x71,
	0x13, 0x85, 0x5c, 0x17, 0x8f, 0x75, 0x6c, 0xe3, 0x7c, 0x13, 0x85, 0xb6, 0xc5, 0x21, 0xed, 0x46,
	0xa1, 0x1c, 0xc9, 0xa5, 0xf1, 0x78, 0xc7, 0x42, 0xd9, 0x59, 0xeb, 0x86, 0xcb, 0x1c, 0xec, 0xc1,
	0x65, 0x52, 0x4d, 0x75, 0x3c, 0xe1, 0xd8, 0x1e, 0x5c, 0x3a, 0xde, 0x26, 0x0f, 0x97, 0x14, 0x04,
	0x18, 0x93, 0xce, 0xd3, 0x49, 0x81, 0x3c, 0xe9, 0x74, 0x9a, 0x74, 0x86, 0x29, 0xd8, 0x50, 0xb9,
	0xcb, 0xc6, 0xe6, 0x1a, 0x79, 0x6a, 0x0b, 0x6c, 0xeb, 0x86, 0xca, 0x5d, 0xd0, 0x03, 0x4a, 0xf2,
	0x55, 0x14, 0x86, 0xb1, 0x87, 0xd8, 0x3f, 0x7e, 0xbc, 0xab, 0x57, 0x05, 0xfe, 0x98, 0x1d, 0x5f,
	0x56, 0xc1, 0x5a, 0x6f, 0xd5, 0x46, 0x32, 0xbc, 0x70, 0x05, 0xb8, 0xb6, 0x24, 0xbc, 0xcf, 0xcf,
	0x3a, 0xb6, 0x37, 0xe8, 0xf6, 0x2c, 0x7a, 0xb7, 0xf7, 0x12, 0xab, 0x1b, 0xde, 0x0f, 0x0e, 0xd9,
	0xf2, 0x98, 0x9d, 0xbf, 0x26, 0x12, 0x9e, 0xdc, 0x2c, 0xa1, 0xad, 0xff, 0xe3, 0xa4, 0x63, 0x18,
	0x0c, 0xb5, 0x8d, 0xa4, 0x15, 0x20, 0xb5, 0xf0, 0x5c, 0x47, 0xcd, 0xe5, 0x48, 0x53, 0x11, 0x2e,
	0x29, 0x08, 0x28, 0xce, 0xc6, 0xd5, 0xf1, 0xfc, 0x96, 0xb3, 0xe9, 0x1a, 0xb1, 0x66, 0xe3, 0x4a,
	0x21, 0xe0, 0xa0, 0xca, 0x46, 0x82, 0x7a, 0x62, 0xe9, 0xe5, 0x0b, 0x7f, 0xa2, 0x97, 0x07, 0x32,
	0xe8, 0x32, 0x67, 0xb6, 0x74, 0xd4, 0x03, 0xa3, 0xe2, 0xf5, 0x24, 0xcf, 0x84, 0xa3, 0xcb, 0x0d,
	0xdc, 0xc0, 0xee, 0x8b, 0x56, 0x79, 0xf2, 0xb7, 0x11, 0x15, 0x3c, 0x2f, 0x62, 0x95, 0x3c, 0x13,
	0x9b, 0xd7, 0x78, 0x92, 0xca, 0xf9, 0x12, 0x29, 0x5e, 0x72, 0x3a, 0x3d, 0x49, 0xc5, 0x14, 0x19,
	0x09, 0x86, 0x48, 0xbb, 0xcf, 0xb2, 0x32, 0xbd, 0x75, 0xf7, 0xe5, 0xcd, 0x57, 0xa6, 0xb7, 0x6e,
	0x5f, 0x99, 0xde, 0x7a, 0xfb, 0xca, 0x8c, 0x18, 0xf3, 0x95, 0x4d, 0x57, 0xe6, 0x22, 0xca, 0xa1,
	0xc6, 0xca, 0x64, 0x0e, 0x78, 0x11, 0xa8, 0xc1, 0xaa, 0x46, 0xa8, 0x8e, 0x49, 0x82, 0x3c, 0xf1,
	0xef, 0xd3, 0xab, 0x8e, 0xed, 0x0b, 0x41, 0x46, 0x5e, 0x44, 0x75, 0xbc, 0xcc, 0x62, 0xb5, 0x4d,
	0xa0, 0x36, 0xd6, 0x62, 0x06, 0x62, 0x8b, 0x40, 0xdf, 0x36, 0x79, 0x06, 0xae, 0x9d, 0xd7, 0x3a,
	0x6e, 0x1b, 0x95, 0x42, 0x97, 0xce, 0x48, 0x5b, 0x0e, 0xae, 0x99, 0x00, 0xec, 0xb3, 0x24, 0x91,
	0x33, 0xf8, 0x7a, 0xc7, 0xb7, 0x02, 0x95, 0xc6, 0x1c, 0xc1, 0xd1, 0xb6, 0x44, 0x72, 0x02, 0x8b,
	0x52, 0xf1, 0x01, 0x7c, 0x63, 0xab, 0xa9, 0xf4, 0xf9, 0xb3, 0xa5, 0xe2, 0xe3, 0x67, 0x4f, 0x25,
	0x77, 0xda, 0x9b, 0x5b, 0x4b, 0x55, 0xf0, 0xae, 0xa3, 0x52, 0xc9, 0x2d, 0xf6, 0x6f, 0xd0, 0x1d,
	0xc5, 0xbe, 0xe8, 0xfc, 0xe7, 0x82, 0x7c, 0xc0, 0x24, 0x2f, 0xc6, 0xbe, 0xde, 0xec, 0xdd, 0x91,
	0xf8, 0x0d, 0xff, 0x03, 0x7a, 0xf8, 0x49, 0xde, 0xd1, 0x2f, 0xc4, 0xd1, 0xbf, 0xb4, 0x1f, 0xd5,
	0x9b, 0xc8, 0x53, 0xf1, 0xbe, 0x95, 0x81, 0xc3, 0x0f, 0xcb, 0x6b, 0xfa, 0xd2, 0xb1, 0x7d, 0xd9,
	0x62, 0xc7, 0xcd, 0xcb, 0x00, 0x91, 0x32, 0x29, 0x84, 0x6c, 0xf6, 0x57, 0x85, 0x08, 0xb3, 0xbf,
	0x1c, 0x21, 0x5b, 0x9a, 0x23, 0x78, 0x13, 0x6f, 0x76, 0x40, 0xe8, 0x7d, 0x93, 0x08, 0x66, 0x9a,
	0xec, 0x07, 0x7b, 0xe6, 0xeb, 0x09, 0xbd, 0xaf, 0x82, 0x49, 0x12, 0x47, 0x04, 0x4f, 0x26, 0x60,
	0x7f, 0x87, 0xaf, 0x69, 0x10, 0x82, 0x1d, 0xfc, 0xb3, 0x79, 0x89, 0x7f, 0x36, 0xe7, 0x7f, 0xc3,
	0x31, 0xd0, 0xad, 0x3e, 0x32, 0xc9, 0xcf, 0xe9, 0xd9, 0x6f, 0x78, 0x08, 0xf4, 0xca, 0x05, 0x4c,
	0xe3, 0x75, 0x2c, 0xbe, 0xa6, 0xf7, 0x54, 0x1c, 0x61, 0x3b, 0xcf, 0x4c, 0xff, 0x1f, 0xbe, 0xfe,
	0xf5, 0xf8, 0xb6, 0xeb, 0xb7, 0xc6, 0x4b, 0x37, 0x6e, 0x8d, 0x97, 0x6e, 0xde, 0x1a, 0x2f, 0x5d,
	0xfb, 0x66, 0x7c, 0x5b, 0x6d, 0x17, 0xff, 0x96, 0x7f, 0xf2, 0x8f, 0x00, 0x00, 0x00, 0xff, 0xff,
	0x67, 0x03, 0xac, 0x1b, 0x4e, 0x18, 0x00, 0x00,
}

func (m *RequestHeader) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RequestHeader) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RequestHeader) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.AuthRevision != 0 {
		i = encodeVarintRaftInternal(dAtA, i, uint64(m.AuthRevision))
		i--
		dAtA[i] = 0x18
	}
	if len(m.Username) > 0 {
		i -= len(m.Username)
		copy(dAtA[i:], m.Username)
		i = encodeVarintRaftInternal(dAtA, i, uint64(len(m.Username)))
		i--
		dAtA[i] = 0x12
	}
	if m.ID != 0 {
		i = encodeVarintRaftInternal(dAtA, i, uint64(m.ID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *InternalRaftRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *InternalRaftRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *InternalRaftRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.NodeDetail != nil {
		{
			size, err := m.NodeDetail.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintRaftInternal(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x5e
		i--
		dAtA[i] = 0x82
	}
	if m.NodeDelete != nil {
		{
			size, err := m.NodeDelete.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintRaftInternal(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x5d
		i--
		dAtA[i] = 0xfa
	}
	if m.NodeUpdate != nil {
		{
			size, err := m.NodeUpdate.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintRaftInternal(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x5d
		i--
		dAtA[i] = 0xf2
	}
	if m.NodeList != nil {
		{
			size, err := m.NodeList.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintRaftInternal(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x5d
		i--
		dAtA[i] = 0xea
	}
	if m.NodeAdd != nil {
		{
			size, err := m.NodeAdd.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintRaftInternal(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x5d
		i--
		dAtA[i] = 0xe2
	}
	if m.ScheduleNamespaceUpdate != nil {
		{
			size, err := m.ScheduleNamespaceUpdate.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintRaftInternal(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x5a
		i--
		dAtA[i] = 0xf2
	}
	if m.ScheduleNamespaceDetail != nil {
		{
			size, err := m.ScheduleNamespaceDetail.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintRaftInternal(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x5a
		i--
		dAtA[i] = 0xea
	}
	if m.ScheduleNamespaceDelete != nil {
		{
			size, err := m.ScheduleNamespaceDelete.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintRaftInternal(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x5a
		i--
		dAtA[i] = 0xe2
	}
	if m.ScheduleNamespaceList != nil {
		{
			size, err := m.ScheduleNamespaceList.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintRaftInternal(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x5a
		i--
		dAtA[i] = 0xda
	}
	if m.ScheduleNamespaceAdd != nil {
		{
			size, err := m.ScheduleNamespaceAdd.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintRaftInternal(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x5a
		i--
		dAtA[i] = 0xd2
	}
	if m.ScheduleEvalNack != nil {
		{
			size, err := m.ScheduleEvalNack.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintRaftInternal(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x5a
		i--
		dAtA[i] = 0x92
	}
	if m.ScheduleEvalAck != nil {
		{
			size, err := m.ScheduleEvalAck.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintRaftInternal(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x5a
		i--
		dAtA[i] = 0x8a
	}
	if m.ScheduleEvalDequeue != nil {
		{
			size, err := m.ScheduleEvalDequeue.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintRaftInternal(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x5a
		i--
		dAtA[i] = 0x82
	}
	if m.PlanAllocationEnqueue != nil {
		{
			size, err := m.PlanAllocationEnqueue.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintRaftInternal(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x59
		i--
		dAtA[i] = 0xe2
	}
	if m.ScheduleSimpleAllocationList != nil {
		{
			size, err := m.ScheduleSimpleAllocationList.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintRaftInternal(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x59
		i--
		dAtA[i] = 0xda
	}
	if m.ScheduleAllocationDetail != nil {
		{
			size, err := m.ScheduleAllocationDetail.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintRaftInternal(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x59
		i--
		dAtA[i] = 0xd2
	}
	if m.ScheduleAllocationDelete != nil {
		{
			size, err := m.ScheduleAllocationDelete.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintRaftInternal(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x59
		i--
		dAtA[i] = 0xca
	}
	if m.ScheduleAllocationStatusUpdate != nil {
		{
			size, err := m.ScheduleAllocationStatusUpdate.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintRaftInternal(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x59
		i--
		dAtA[i] = 0xc2
	}
	if m.ScheduleAllocationList != nil {
		{
			size, err := m.ScheduleAllocationList.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintRaftInternal(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x59
		i--
		dAtA[i] = 0xba
	}
	if m.ScheduleAllocationAdd != nil {
		{
			size, err := m.ScheduleAllocationAdd.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintRaftInternal(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x59
		i--
		dAtA[i] = 0xb2
	}
	if m.ScheduleEvalDetail != nil {
		{
			size, err := m.ScheduleEvalDetail.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintRaftInternal(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x59
		i--
		dAtA[i] = 0x82
	}
	if m.ScheduleEvalDelete != nil {
		{
			size, err := m.ScheduleEvalDelete.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintRaftInternal(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x58
		i--
		dAtA[i] = 0xfa
	}
	if m.ScheduleEvalStatusUpdate != nil {
		{
			size, err := m.ScheduleEvalStatusUpdate.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintRaftInternal(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x58
		i--
		dAtA[i] = 0xf2
	}
	if m.ScheduleEvalList != nil {
		{
			size, err := m.ScheduleEvalList.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintRaftInternal(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x58
		i--
		dAtA[i] = 0xea
	}
	if m.ScheduleEvalAdd != nil {
		{
			size, err := m.ScheduleEvalAdd.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintRaftInternal(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x58
		i--
		dAtA[i] = 0xe2
	}
	if m.ScheduleJobExist != nil {
		{
			size, err := m.ScheduleJobExist.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintRaftInternal(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x58
		i--
		dAtA[i] = 0xc2
	}
	if m.ScheduleJobDetail != nil {
		{
			size, err := m.ScheduleJobDetail.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintRaftInternal(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x58
		i--
		dAtA[i] = 0xba
	}
	if m.ScheduleJobDelete != nil {
		{
			size, err := m.ScheduleJobDelete.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintRaftInternal(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x58
		i--
		dAtA[i] = 0xb2
	}
	if m.ScheduleJobStatusUpdate != nil {
		{
			size, err := m.ScheduleJobStatusUpdate.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintRaftInternal(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x58
		i--
		dAtA[i] = 0xaa
	}
	if m.ScheduleJobList != nil {
		{
			size, err := m.ScheduleJobList.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintRaftInternal(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x58
		i--
		dAtA[i] = 0xa2
	}
	if m.ScheduleJobAdd != nil {
		{
			size, err := m.ScheduleJobAdd.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintRaftInternal(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x58
		i--
		dAtA[i] = 0x9a
	}
	if m.SchedulePlanOffline != nil {
		{
			size, err := m.SchedulePlanOffline.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintRaftInternal(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x57
		i--
		dAtA[i] = 0xf2
	}
	if m.SchedulePlanOnline != nil {
		{
			size, err := m.SchedulePlanOnline.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintRaftInternal(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x57
		i--
		dAtA[i] = 0xea
	}
	if m.SchedulePlanDetail != nil {
		{
			size, err := m.SchedulePlanDetail.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintRaftInternal(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x57
		i--
		dAtA[i] = 0xe2
	}
	if m.SchedulePlanDelete != nil {
		{
			size, err := m.SchedulePlanDelete.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintRaftInternal(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x57
		i--
		dAtA[i] = 0xda
	}
	if m.SchedulePlanUpdate != nil {
		{
			size, err := m.SchedulePlanUpdate.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintRaftInternal(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x57
		i--
		dAtA[i] = 0xd2
	}
	if m.SchedulePlanAdd != nil {
		{
			size, err := m.SchedulePlanAdd.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintRaftInternal(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x57
		i--
		dAtA[i] = 0xca
	}
	if m.SchedulePlanList != nil {
		{
			size, err := m.SchedulePlanList.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintRaftInternal(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x57
		i--
		dAtA[i] = 0xc2
	}
	if m.DowngradeInfoSet != nil {
		{
			size, err := m.DowngradeInfoSet.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintRaftInternal(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x51
		i--
		dAtA[i] = 0xb2
	}
	if m.ClusterMemberAttrSet != nil {
		{
			size, err := m.ClusterMemberAttrSet.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintRaftInternal(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x51
		i--
		dAtA[i] = 0xaa
	}
	if m.ClusterVersionSet != nil {
		{
			size, err := m.ClusterVersionSet.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintRaftInternal(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x51
		i--
		dAtA[i] = 0xa2
	}
	if m.AuthRoleRevokePermission != nil {
		{
			size, err := m.AuthRoleRevokePermission.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintRaftInternal(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x4b
		i--
		dAtA[i] = 0xa2
	}
	if m.AuthRoleGrantPermission != nil {
		{
			size, err := m.AuthRoleGrantPermission.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintRaftInternal(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x4b
		i--
		dAtA[i] = 0x9a
	}
	if m.AuthRoleGet != nil {
		{
			size, err := m.AuthRoleGet.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintRaftInternal(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x4b
		i--
		dAtA[i] = 0x92
	}
	if m.AuthRoleDelete != nil {
		{
			size, err := m.AuthRoleDelete.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintRaftInternal(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x4b
		i--
		dAtA[i] = 0x8a
	}
	if m.AuthRoleAdd != nil {
		{
			size, err := m.AuthRoleAdd.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintRaftInternal(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x4b
		i--
		dAtA[i] = 0x82
	}
	if m.AuthRoleList != nil {
		{
			size, err := m.AuthRoleList.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintRaftInternal(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x45
		i--
		dAtA[i] = 0x9a
	}
	if m.AuthUserList != nil {
		{
			size, err := m.AuthUserList.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintRaftInternal(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x45
		i--
		dAtA[i] = 0x92
	}
	if m.AuthUserRevokeRole != nil {
		{
			size, err := m.AuthUserRevokeRole.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintRaftInternal(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x45
		i--
		dAtA[i] = 0x8a
	}
	if m.AuthUserGrantRole != nil {
		{
			size, err := m.AuthUserGrantRole.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintRaftInternal(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x45
		i--
		dAtA[i] = 0x82
	}
	if m.AuthUserChangePassword != nil {
		{
			size, err := m.AuthUserChangePassword.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintRaftInternal(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x44
		i--
		dAtA[i] = 0xfa
	}
	if m.AuthUserGet != nil {
		{
			size, err := m.AuthUserGet.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintRaftInternal(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x44
		i--
		dAtA[i] = 0xf2
	}
	if m.AuthUserDelete != nil {
		{
			size, err := m.AuthUserDelete.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintRaftInternal(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x44
		i--
		dAtA[i] = 0xea
	}
	if m.AuthUserAdd != nil {
		{
			size, err := m.AuthUserAdd.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintRaftInternal(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x44
		i--
		dAtA[i] = 0xe2
	}
	if m.AuthStatus != nil {
		{
			size, err := m.AuthStatus.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintRaftInternal(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3f
		i--
		dAtA[i] = 0xaa
	}
	if m.Authenticate != nil {
		{
			size, err := m.Authenticate.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintRaftInternal(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3f
		i--
		dAtA[i] = 0xa2
	}
	if m.AuthDisable != nil {
		{
			size, err := m.AuthDisable.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintRaftInternal(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3f
		i--
		dAtA[i] = 0x9a
	}
	if m.AuthEnable != nil {
		{
			size, err := m.AuthEnable.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintRaftInternal(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3e
		i--
		dAtA[i] = 0xc2
	}
	if m.Header != nil {
		{
			size, err := m.Header.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintRaftInternal(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x6
		i--
		dAtA[i] = 0xa2
	}
	if m.LeaseCheckpoint != nil {
		{
			size, err := m.LeaseCheckpoint.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintRaftInternal(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x5a
	}
	if m.Alarm != nil {
		{
			size, err := m.Alarm.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintRaftInternal(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x52
	}
	if m.LeaseRevoke != nil {
		{
			size, err := m.LeaseRevoke.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintRaftInternal(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x4a
	}
	if m.LeaseGrant != nil {
		{
			size, err := m.LeaseGrant.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintRaftInternal(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x42
	}
	if m.Compaction != nil {
		{
			size, err := m.Compaction.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintRaftInternal(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3a
	}
	if m.Txn != nil {
		{
			size, err := m.Txn.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintRaftInternal(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	if m.DeleteRange != nil {
		{
			size, err := m.DeleteRange.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintRaftInternal(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	if m.Put != nil {
		{
			size, err := m.Put.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintRaftInternal(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if m.Range != nil {
		{
			size, err := m.Range.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintRaftInternal(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.V2 != nil {
		{
			size, err := m.V2.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintRaftInternal(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.ID != 0 {
		i = encodeVarintRaftInternal(dAtA, i, uint64(m.ID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *EmptyResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EmptyResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EmptyResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	return len(dAtA) - i, nil
}

func (m *InternalAuthenticateRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *InternalAuthenticateRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *InternalAuthenticateRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.SimpleToken) > 0 {
		i -= len(m.SimpleToken)
		copy(dAtA[i:], m.SimpleToken)
		i = encodeVarintRaftInternal(dAtA, i, uint64(len(m.SimpleToken)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Password) > 0 {
		i -= len(m.Password)
		copy(dAtA[i:], m.Password)
		i = encodeVarintRaftInternal(dAtA, i, uint64(len(m.Password)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintRaftInternal(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintRaftInternal(dAtA []byte, offset int, v uint64) int {
	offset -= sovRaftInternal(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *RequestHeader) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ID != 0 {
		n += 1 + sovRaftInternal(uint64(m.ID))
	}
	l = len(m.Username)
	if l > 0 {
		n += 1 + l + sovRaftInternal(uint64(l))
	}
	if m.AuthRevision != 0 {
		n += 1 + sovRaftInternal(uint64(m.AuthRevision))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *InternalRaftRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ID != 0 {
		n += 1 + sovRaftInternal(uint64(m.ID))
	}
	if m.V2 != nil {
		l = m.V2.Size()
		n += 1 + l + sovRaftInternal(uint64(l))
	}
	if m.Range != nil {
		l = m.Range.Size()
		n += 1 + l + sovRaftInternal(uint64(l))
	}
	if m.Put != nil {
		l = m.Put.Size()
		n += 1 + l + sovRaftInternal(uint64(l))
	}
	if m.DeleteRange != nil {
		l = m.DeleteRange.Size()
		n += 1 + l + sovRaftInternal(uint64(l))
	}
	if m.Txn != nil {
		l = m.Txn.Size()
		n += 1 + l + sovRaftInternal(uint64(l))
	}
	if m.Compaction != nil {
		l = m.Compaction.Size()
		n += 1 + l + sovRaftInternal(uint64(l))
	}
	if m.LeaseGrant != nil {
		l = m.LeaseGrant.Size()
		n += 1 + l + sovRaftInternal(uint64(l))
	}
	if m.LeaseRevoke != nil {
		l = m.LeaseRevoke.Size()
		n += 1 + l + sovRaftInternal(uint64(l))
	}
	if m.Alarm != nil {
		l = m.Alarm.Size()
		n += 1 + l + sovRaftInternal(uint64(l))
	}
	if m.LeaseCheckpoint != nil {
		l = m.LeaseCheckpoint.Size()
		n += 1 + l + sovRaftInternal(uint64(l))
	}
	if m.Header != nil {
		l = m.Header.Size()
		n += 2 + l + sovRaftInternal(uint64(l))
	}
	if m.AuthEnable != nil {
		l = m.AuthEnable.Size()
		n += 2 + l + sovRaftInternal(uint64(l))
	}
	if m.AuthDisable != nil {
		l = m.AuthDisable.Size()
		n += 2 + l + sovRaftInternal(uint64(l))
	}
	if m.Authenticate != nil {
		l = m.Authenticate.Size()
		n += 2 + l + sovRaftInternal(uint64(l))
	}
	if m.AuthStatus != nil {
		l = m.AuthStatus.Size()
		n += 2 + l + sovRaftInternal(uint64(l))
	}
	if m.AuthUserAdd != nil {
		l = m.AuthUserAdd.Size()
		n += 2 + l + sovRaftInternal(uint64(l))
	}
	if m.AuthUserDelete != nil {
		l = m.AuthUserDelete.Size()
		n += 2 + l + sovRaftInternal(uint64(l))
	}
	if m.AuthUserGet != nil {
		l = m.AuthUserGet.Size()
		n += 2 + l + sovRaftInternal(uint64(l))
	}
	if m.AuthUserChangePassword != nil {
		l = m.AuthUserChangePassword.Size()
		n += 2 + l + sovRaftInternal(uint64(l))
	}
	if m.AuthUserGrantRole != nil {
		l = m.AuthUserGrantRole.Size()
		n += 2 + l + sovRaftInternal(uint64(l))
	}
	if m.AuthUserRevokeRole != nil {
		l = m.AuthUserRevokeRole.Size()
		n += 2 + l + sovRaftInternal(uint64(l))
	}
	if m.AuthUserList != nil {
		l = m.AuthUserList.Size()
		n += 2 + l + sovRaftInternal(uint64(l))
	}
	if m.AuthRoleList != nil {
		l = m.AuthRoleList.Size()
		n += 2 + l + sovRaftInternal(uint64(l))
	}
	if m.AuthRoleAdd != nil {
		l = m.AuthRoleAdd.Size()
		n += 2 + l + sovRaftInternal(uint64(l))
	}
	if m.AuthRoleDelete != nil {
		l = m.AuthRoleDelete.Size()
		n += 2 + l + sovRaftInternal(uint64(l))
	}
	if m.AuthRoleGet != nil {
		l = m.AuthRoleGet.Size()
		n += 2 + l + sovRaftInternal(uint64(l))
	}
	if m.AuthRoleGrantPermission != nil {
		l = m.AuthRoleGrantPermission.Size()
		n += 2 + l + sovRaftInternal(uint64(l))
	}
	if m.AuthRoleRevokePermission != nil {
		l = m.AuthRoleRevokePermission.Size()
		n += 2 + l + sovRaftInternal(uint64(l))
	}
	if m.ClusterVersionSet != nil {
		l = m.ClusterVersionSet.Size()
		n += 2 + l + sovRaftInternal(uint64(l))
	}
	if m.ClusterMemberAttrSet != nil {
		l = m.ClusterMemberAttrSet.Size()
		n += 2 + l + sovRaftInternal(uint64(l))
	}
	if m.DowngradeInfoSet != nil {
		l = m.DowngradeInfoSet.Size()
		n += 2 + l + sovRaftInternal(uint64(l))
	}
	if m.SchedulePlanList != nil {
		l = m.SchedulePlanList.Size()
		n += 2 + l + sovRaftInternal(uint64(l))
	}
	if m.SchedulePlanAdd != nil {
		l = m.SchedulePlanAdd.Size()
		n += 2 + l + sovRaftInternal(uint64(l))
	}
	if m.SchedulePlanUpdate != nil {
		l = m.SchedulePlanUpdate.Size()
		n += 2 + l + sovRaftInternal(uint64(l))
	}
	if m.SchedulePlanDelete != nil {
		l = m.SchedulePlanDelete.Size()
		n += 2 + l + sovRaftInternal(uint64(l))
	}
	if m.SchedulePlanDetail != nil {
		l = m.SchedulePlanDetail.Size()
		n += 2 + l + sovRaftInternal(uint64(l))
	}
	if m.SchedulePlanOnline != nil {
		l = m.SchedulePlanOnline.Size()
		n += 2 + l + sovRaftInternal(uint64(l))
	}
	if m.SchedulePlanOffline != nil {
		l = m.SchedulePlanOffline.Size()
		n += 2 + l + sovRaftInternal(uint64(l))
	}
	if m.ScheduleJobAdd != nil {
		l = m.ScheduleJobAdd.Size()
		n += 2 + l + sovRaftInternal(uint64(l))
	}
	if m.ScheduleJobList != nil {
		l = m.ScheduleJobList.Size()
		n += 2 + l + sovRaftInternal(uint64(l))
	}
	if m.ScheduleJobStatusUpdate != nil {
		l = m.ScheduleJobStatusUpdate.Size()
		n += 2 + l + sovRaftInternal(uint64(l))
	}
	if m.ScheduleJobDelete != nil {
		l = m.ScheduleJobDelete.Size()
		n += 2 + l + sovRaftInternal(uint64(l))
	}
	if m.ScheduleJobDetail != nil {
		l = m.ScheduleJobDetail.Size()
		n += 2 + l + sovRaftInternal(uint64(l))
	}
	if m.ScheduleJobExist != nil {
		l = m.ScheduleJobExist.Size()
		n += 2 + l + sovRaftInternal(uint64(l))
	}
	if m.ScheduleEvalAdd != nil {
		l = m.ScheduleEvalAdd.Size()
		n += 2 + l + sovRaftInternal(uint64(l))
	}
	if m.ScheduleEvalList != nil {
		l = m.ScheduleEvalList.Size()
		n += 2 + l + sovRaftInternal(uint64(l))
	}
	if m.ScheduleEvalStatusUpdate != nil {
		l = m.ScheduleEvalStatusUpdate.Size()
		n += 2 + l + sovRaftInternal(uint64(l))
	}
	if m.ScheduleEvalDelete != nil {
		l = m.ScheduleEvalDelete.Size()
		n += 2 + l + sovRaftInternal(uint64(l))
	}
	if m.ScheduleEvalDetail != nil {
		l = m.ScheduleEvalDetail.Size()
		n += 2 + l + sovRaftInternal(uint64(l))
	}
	if m.ScheduleAllocationAdd != nil {
		l = m.ScheduleAllocationAdd.Size()
		n += 2 + l + sovRaftInternal(uint64(l))
	}
	if m.ScheduleAllocationList != nil {
		l = m.ScheduleAllocationList.Size()
		n += 2 + l + sovRaftInternal(uint64(l))
	}
	if m.ScheduleAllocationStatusUpdate != nil {
		l = m.ScheduleAllocationStatusUpdate.Size()
		n += 2 + l + sovRaftInternal(uint64(l))
	}
	if m.ScheduleAllocationDelete != nil {
		l = m.ScheduleAllocationDelete.Size()
		n += 2 + l + sovRaftInternal(uint64(l))
	}
	if m.ScheduleAllocationDetail != nil {
		l = m.ScheduleAllocationDetail.Size()
		n += 2 + l + sovRaftInternal(uint64(l))
	}
	if m.ScheduleSimpleAllocationList != nil {
		l = m.ScheduleSimpleAllocationList.Size()
		n += 2 + l + sovRaftInternal(uint64(l))
	}
	if m.PlanAllocationEnqueue != nil {
		l = m.PlanAllocationEnqueue.Size()
		n += 2 + l + sovRaftInternal(uint64(l))
	}
	if m.ScheduleEvalDequeue != nil {
		l = m.ScheduleEvalDequeue.Size()
		n += 2 + l + sovRaftInternal(uint64(l))
	}
	if m.ScheduleEvalAck != nil {
		l = m.ScheduleEvalAck.Size()
		n += 2 + l + sovRaftInternal(uint64(l))
	}
	if m.ScheduleEvalNack != nil {
		l = m.ScheduleEvalNack.Size()
		n += 2 + l + sovRaftInternal(uint64(l))
	}
	if m.ScheduleNamespaceAdd != nil {
		l = m.ScheduleNamespaceAdd.Size()
		n += 2 + l + sovRaftInternal(uint64(l))
	}
	if m.ScheduleNamespaceList != nil {
		l = m.ScheduleNamespaceList.Size()
		n += 2 + l + sovRaftInternal(uint64(l))
	}
	if m.ScheduleNamespaceDelete != nil {
		l = m.ScheduleNamespaceDelete.Size()
		n += 2 + l + sovRaftInternal(uint64(l))
	}
	if m.ScheduleNamespaceDetail != nil {
		l = m.ScheduleNamespaceDetail.Size()
		n += 2 + l + sovRaftInternal(uint64(l))
	}
	if m.ScheduleNamespaceUpdate != nil {
		l = m.ScheduleNamespaceUpdate.Size()
		n += 2 + l + sovRaftInternal(uint64(l))
	}
	if m.NodeAdd != nil {
		l = m.NodeAdd.Size()
		n += 2 + l + sovRaftInternal(uint64(l))
	}
	if m.NodeList != nil {
		l = m.NodeList.Size()
		n += 2 + l + sovRaftInternal(uint64(l))
	}
	if m.NodeUpdate != nil {
		l = m.NodeUpdate.Size()
		n += 2 + l + sovRaftInternal(uint64(l))
	}
	if m.NodeDelete != nil {
		l = m.NodeDelete.Size()
		n += 2 + l + sovRaftInternal(uint64(l))
	}
	if m.NodeDetail != nil {
		l = m.NodeDetail.Size()
		n += 2 + l + sovRaftInternal(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *EmptyResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *InternalAuthenticateRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovRaftInternal(uint64(l))
	}
	l = len(m.Password)
	if l > 0 {
		n += 1 + l + sovRaftInternal(uint64(l))
	}
	l = len(m.SimpleToken)
	if l > 0 {
		n += 1 + l + sovRaftInternal(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovRaftInternal(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozRaftInternal(x uint64) (n int) {
	return sovRaftInternal(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *RequestHeader) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRaftInternal
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RequestHeader: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RequestHeader: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			m.ID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRaftInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ID |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Username", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRaftInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRaftInternal
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRaftInternal
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Username = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AuthRevision", wireType)
			}
			m.AuthRevision = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRaftInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AuthRevision |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipRaftInternal(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRaftInternal
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *InternalRaftRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRaftInternal
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: InternalRaftRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: InternalRaftRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			m.ID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRaftInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ID |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field V2", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRaftInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRaftInternal
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRaftInternal
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.V2 == nil {
				m.V2 = &Request{}
			}
			if err := m.V2.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Range", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRaftInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRaftInternal
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRaftInternal
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Range == nil {
				m.Range = &RangeRequest{}
			}
			if err := m.Range.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Put", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRaftInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRaftInternal
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRaftInternal
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Put == nil {
				m.Put = &PutRequest{}
			}
			if err := m.Put.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DeleteRange", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRaftInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRaftInternal
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRaftInternal
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.DeleteRange == nil {
				m.DeleteRange = &DeleteRangeRequest{}
			}
			if err := m.DeleteRange.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Txn", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRaftInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRaftInternal
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRaftInternal
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Txn == nil {
				m.Txn = &TxnRequest{}
			}
			if err := m.Txn.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Compaction", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRaftInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRaftInternal
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRaftInternal
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Compaction == nil {
				m.Compaction = &CompactionRequest{}
			}
			if err := m.Compaction.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LeaseGrant", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRaftInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRaftInternal
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRaftInternal
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.LeaseGrant == nil {
				m.LeaseGrant = &LeaseGrantRequest{}
			}
			if err := m.LeaseGrant.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LeaseRevoke", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRaftInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRaftInternal
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRaftInternal
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.LeaseRevoke == nil {
				m.LeaseRevoke = &LeaseRevokeRequest{}
			}
			if err := m.LeaseRevoke.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Alarm", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRaftInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRaftInternal
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRaftInternal
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Alarm == nil {
				m.Alarm = &AlarmRequest{}
			}
			if err := m.Alarm.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LeaseCheckpoint", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRaftInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRaftInternal
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRaftInternal
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.LeaseCheckpoint == nil {
				m.LeaseCheckpoint = &LeaseCheckpointRequest{}
			}
			if err := m.LeaseCheckpoint.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 100:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Header", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRaftInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRaftInternal
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRaftInternal
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Header == nil {
				m.Header = &RequestHeader{}
			}
			if err := m.Header.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 1000:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AuthEnable", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRaftInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRaftInternal
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRaftInternal
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.AuthEnable == nil {
				m.AuthEnable = &AuthEnableRequest{}
			}
			if err := m.AuthEnable.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 1011:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AuthDisable", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRaftInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRaftInternal
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRaftInternal
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.AuthDisable == nil {
				m.AuthDisable = &AuthDisableRequest{}
			}
			if err := m.AuthDisable.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 1012:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Authenticate", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRaftInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRaftInternal
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRaftInternal
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Authenticate == nil {
				m.Authenticate = &InternalAuthenticateRequest{}
			}
			if err := m.Authenticate.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 1013:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AuthStatus", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRaftInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRaftInternal
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRaftInternal
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.AuthStatus == nil {
				m.AuthStatus = &AuthStatusRequest{}
			}
			if err := m.AuthStatus.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 1100:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AuthUserAdd", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRaftInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRaftInternal
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRaftInternal
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.AuthUserAdd == nil {
				m.AuthUserAdd = &AuthUserAddRequest{}
			}
			if err := m.AuthUserAdd.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 1101:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AuthUserDelete", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRaftInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRaftInternal
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRaftInternal
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.AuthUserDelete == nil {
				m.AuthUserDelete = &AuthUserDeleteRequest{}
			}
			if err := m.AuthUserDelete.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 1102:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AuthUserGet", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRaftInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRaftInternal
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRaftInternal
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.AuthUserGet == nil {
				m.AuthUserGet = &AuthUserGetRequest{}
			}
			if err := m.AuthUserGet.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 1103:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AuthUserChangePassword", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRaftInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRaftInternal
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRaftInternal
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.AuthUserChangePassword == nil {
				m.AuthUserChangePassword = &AuthUserChangePasswordRequest{}
			}
			if err := m.AuthUserChangePassword.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 1104:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AuthUserGrantRole", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRaftInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRaftInternal
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRaftInternal
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.AuthUserGrantRole == nil {
				m.AuthUserGrantRole = &AuthUserGrantRoleRequest{}
			}
			if err := m.AuthUserGrantRole.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 1105:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AuthUserRevokeRole", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRaftInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRaftInternal
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRaftInternal
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.AuthUserRevokeRole == nil {
				m.AuthUserRevokeRole = &AuthUserRevokeRoleRequest{}
			}
			if err := m.AuthUserRevokeRole.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 1106:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AuthUserList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRaftInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRaftInternal
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRaftInternal
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.AuthUserList == nil {
				m.AuthUserList = &AuthUserListRequest{}
			}
			if err := m.AuthUserList.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 1107:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AuthRoleList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRaftInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRaftInternal
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRaftInternal
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.AuthRoleList == nil {
				m.AuthRoleList = &AuthRoleListRequest{}
			}
			if err := m.AuthRoleList.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 1200:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AuthRoleAdd", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRaftInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRaftInternal
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRaftInternal
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.AuthRoleAdd == nil {
				m.AuthRoleAdd = &AuthRoleAddRequest{}
			}
			if err := m.AuthRoleAdd.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 1201:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AuthRoleDelete", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRaftInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRaftInternal
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRaftInternal
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.AuthRoleDelete == nil {
				m.AuthRoleDelete = &AuthRoleDeleteRequest{}
			}
			if err := m.AuthRoleDelete.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 1202:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AuthRoleGet", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRaftInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRaftInternal
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRaftInternal
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.AuthRoleGet == nil {
				m.AuthRoleGet = &AuthRoleGetRequest{}
			}
			if err := m.AuthRoleGet.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 1203:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AuthRoleGrantPermission", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRaftInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRaftInternal
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRaftInternal
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.AuthRoleGrantPermission == nil {
				m.AuthRoleGrantPermission = &AuthRoleGrantPermissionRequest{}
			}
			if err := m.AuthRoleGrantPermission.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 1204:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AuthRoleRevokePermission", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRaftInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRaftInternal
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRaftInternal
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.AuthRoleRevokePermission == nil {
				m.AuthRoleRevokePermission = &AuthRoleRevokePermissionRequest{}
			}
			if err := m.AuthRoleRevokePermission.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 1300:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClusterVersionSet", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRaftInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRaftInternal
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRaftInternal
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ClusterVersionSet == nil {
				m.ClusterVersionSet = &membershippb.ClusterVersionSetRequest{}
			}
			if err := m.ClusterVersionSet.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 1301:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClusterMemberAttrSet", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRaftInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRaftInternal
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRaftInternal
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ClusterMemberAttrSet == nil {
				m.ClusterMemberAttrSet = &membershippb.ClusterMemberAttrSetRequest{}
			}
			if err := m.ClusterMemberAttrSet.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 1302:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DowngradeInfoSet", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRaftInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRaftInternal
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRaftInternal
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.DowngradeInfoSet == nil {
				m.DowngradeInfoSet = &membershippb.DowngradeInfoSetRequest{}
			}
			if err := m.DowngradeInfoSet.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 1400:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SchedulePlanList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRaftInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRaftInternal
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRaftInternal
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.SchedulePlanList == nil {
				m.SchedulePlanList = &SchedulePlanListRequest{}
			}
			if err := m.SchedulePlanList.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 1401:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SchedulePlanAdd", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRaftInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRaftInternal
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRaftInternal
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.SchedulePlanAdd == nil {
				m.SchedulePlanAdd = &SchedulePlanAddRequest{}
			}
			if err := m.SchedulePlanAdd.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 1402:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SchedulePlanUpdate", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRaftInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRaftInternal
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRaftInternal
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.SchedulePlanUpdate == nil {
				m.SchedulePlanUpdate = &SchedulePlanUpdateRequest{}
			}
			if err := m.SchedulePlanUpdate.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 1403:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SchedulePlanDelete", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRaftInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRaftInternal
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRaftInternal
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.SchedulePlanDelete == nil {
				m.SchedulePlanDelete = &SchedulePlanDeleteRequest{}
			}
			if err := m.SchedulePlanDelete.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 1404:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SchedulePlanDetail", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRaftInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRaftInternal
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRaftInternal
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.SchedulePlanDetail == nil {
				m.SchedulePlanDetail = &SchedulePlanDetailRequest{}
			}
			if err := m.SchedulePlanDetail.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 1405:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SchedulePlanOnline", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRaftInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRaftInternal
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRaftInternal
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.SchedulePlanOnline == nil {
				m.SchedulePlanOnline = &SchedulePlanOnlineRequest{}
			}
			if err := m.SchedulePlanOnline.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 1406:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SchedulePlanOffline", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRaftInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRaftInternal
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRaftInternal
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.SchedulePlanOffline == nil {
				m.SchedulePlanOffline = &SchedulePlanOfflineRequest{}
			}
			if err := m.SchedulePlanOffline.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 1411:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ScheduleJobAdd", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRaftInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRaftInternal
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRaftInternal
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ScheduleJobAdd == nil {
				m.ScheduleJobAdd = &ScheduleJobAddRequest{}
			}
			if err := m.ScheduleJobAdd.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 1412:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ScheduleJobList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRaftInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRaftInternal
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRaftInternal
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ScheduleJobList == nil {
				m.ScheduleJobList = &ScheduleJobListRequest{}
			}
			if err := m.ScheduleJobList.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 1413:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ScheduleJobStatusUpdate", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRaftInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRaftInternal
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRaftInternal
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ScheduleJobStatusUpdate == nil {
				m.ScheduleJobStatusUpdate = &ScheduleJobStatusUpdateRequest{}
			}
			if err := m.ScheduleJobStatusUpdate.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 1414:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ScheduleJobDelete", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRaftInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRaftInternal
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRaftInternal
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ScheduleJobDelete == nil {
				m.ScheduleJobDelete = &ScheduleJobDeleteRequest{}
			}
			if err := m.ScheduleJobDelete.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 1415:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ScheduleJobDetail", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRaftInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRaftInternal
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRaftInternal
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ScheduleJobDetail == nil {
				m.ScheduleJobDetail = &ScheduleJobDetailRequest{}
			}
			if err := m.ScheduleJobDetail.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 1416:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ScheduleJobExist", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRaftInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRaftInternal
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRaftInternal
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ScheduleJobExist == nil {
				m.ScheduleJobExist = &ScheduleJobExistRequest{}
			}
			if err := m.ScheduleJobExist.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 1420:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ScheduleEvalAdd", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRaftInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRaftInternal
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRaftInternal
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ScheduleEvalAdd == nil {
				m.ScheduleEvalAdd = &ScheduleEvalAddRequest{}
			}
			if err := m.ScheduleEvalAdd.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 1421:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ScheduleEvalList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRaftInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRaftInternal
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRaftInternal
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ScheduleEvalList == nil {
				m.ScheduleEvalList = &ScheduleEvalListRequest{}
			}
			if err := m.ScheduleEvalList.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 1422:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ScheduleEvalStatusUpdate", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRaftInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRaftInternal
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRaftInternal
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ScheduleEvalStatusUpdate == nil {
				m.ScheduleEvalStatusUpdate = &ScheduleEvalStatusUpdateRequest{}
			}
			if err := m.ScheduleEvalStatusUpdate.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 1423:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ScheduleEvalDelete", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRaftInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRaftInternal
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRaftInternal
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ScheduleEvalDelete == nil {
				m.ScheduleEvalDelete = &ScheduleEvalDeleteRequest{}
			}
			if err := m.ScheduleEvalDelete.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 1424:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ScheduleEvalDetail", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRaftInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRaftInternal
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRaftInternal
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ScheduleEvalDetail == nil {
				m.ScheduleEvalDetail = &ScheduleEvalDetailRequest{}
			}
			if err := m.ScheduleEvalDetail.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 1430:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ScheduleAllocationAdd", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRaftInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRaftInternal
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRaftInternal
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ScheduleAllocationAdd == nil {
				m.ScheduleAllocationAdd = &ScheduleAllocationAddRequest{}
			}
			if err := m.ScheduleAllocationAdd.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 1431:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ScheduleAllocationList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRaftInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRaftInternal
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRaftInternal
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ScheduleAllocationList == nil {
				m.ScheduleAllocationList = &ScheduleAllocationListRequest{}
			}
			if err := m.ScheduleAllocationList.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 1432:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ScheduleAllocationStatusUpdate", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRaftInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRaftInternal
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRaftInternal
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ScheduleAllocationStatusUpdate == nil {
				m.ScheduleAllocationStatusUpdate = &ScheduleAllocationStatusUpdateRequest{}
			}
			if err := m.ScheduleAllocationStatusUpdate.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 1433:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ScheduleAllocationDelete", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRaftInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRaftInternal
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRaftInternal
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ScheduleAllocationDelete == nil {
				m.ScheduleAllocationDelete = &ScheduleAllocationDeleteRequest{}
			}
			if err := m.ScheduleAllocationDelete.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 1434:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ScheduleAllocationDetail", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRaftInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRaftInternal
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRaftInternal
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ScheduleAllocationDetail == nil {
				m.ScheduleAllocationDetail = &ScheduleAllocationDetailRequest{}
			}
			if err := m.ScheduleAllocationDetail.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 1435:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ScheduleSimpleAllocationList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRaftInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRaftInternal
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRaftInternal
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ScheduleSimpleAllocationList == nil {
				m.ScheduleSimpleAllocationList = &ScheduleAllocationListRequest{}
			}
			if err := m.ScheduleSimpleAllocationList.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 1436:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlanAllocationEnqueue", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRaftInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRaftInternal
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRaftInternal
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.PlanAllocationEnqueue == nil {
				m.PlanAllocationEnqueue = &PlanAllocationEnqueueRequest{}
			}
			if err := m.PlanAllocationEnqueue.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 1440:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ScheduleEvalDequeue", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRaftInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRaftInternal
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRaftInternal
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ScheduleEvalDequeue == nil {
				m.ScheduleEvalDequeue = &ScheduleEvalDequeueRequest{}
			}
			if err := m.ScheduleEvalDequeue.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 1441:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ScheduleEvalAck", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRaftInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRaftInternal
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRaftInternal
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ScheduleEvalAck == nil {
				m.ScheduleEvalAck = &ScheduleEvalAckRequest{}
			}
			if err := m.ScheduleEvalAck.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 1442:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ScheduleEvalNack", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRaftInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRaftInternal
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRaftInternal
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ScheduleEvalNack == nil {
				m.ScheduleEvalNack = &ScheduleEvalNackRequest{}
			}
			if err := m.ScheduleEvalNack.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 1450:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ScheduleNamespaceAdd", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRaftInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRaftInternal
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRaftInternal
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ScheduleNamespaceAdd == nil {
				m.ScheduleNamespaceAdd = &ScheduleNameSpaceAddRequest{}
			}
			if err := m.ScheduleNamespaceAdd.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 1451:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ScheduleNamespaceList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRaftInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRaftInternal
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRaftInternal
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ScheduleNamespaceList == nil {
				m.ScheduleNamespaceList = &ScheduleNameSpaceListRequest{}
			}
			if err := m.ScheduleNamespaceList.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 1452:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ScheduleNamespaceDelete", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRaftInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRaftInternal
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRaftInternal
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ScheduleNamespaceDelete == nil {
				m.ScheduleNamespaceDelete = &ScheduleNameSpaceDeleteRequest{}
			}
			if err := m.ScheduleNamespaceDelete.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 1453:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ScheduleNamespaceDetail", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRaftInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRaftInternal
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRaftInternal
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ScheduleNamespaceDetail == nil {
				m.ScheduleNamespaceDetail = &ScheduleNameSpaceDetailRequest{}
			}
			if err := m.ScheduleNamespaceDetail.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 1454:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ScheduleNamespaceUpdate", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRaftInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRaftInternal
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRaftInternal
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ScheduleNamespaceUpdate == nil {
				m.ScheduleNamespaceUpdate = &ScheduleNameSpaceUpdateRequest{}
			}
			if err := m.ScheduleNamespaceUpdate.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 1500:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NodeAdd", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRaftInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRaftInternal
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRaftInternal
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.NodeAdd == nil {
				m.NodeAdd = &NodeAddRequest{}
			}
			if err := m.NodeAdd.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 1501:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NodeList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRaftInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRaftInternal
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRaftInternal
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.NodeList == nil {
				m.NodeList = &NodeListRequest{}
			}
			if err := m.NodeList.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 1502:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NodeUpdate", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRaftInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRaftInternal
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRaftInternal
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.NodeUpdate == nil {
				m.NodeUpdate = &NodeUpdateRequest{}
			}
			if err := m.NodeUpdate.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 1503:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NodeDelete", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRaftInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRaftInternal
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRaftInternal
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.NodeDelete == nil {
				m.NodeDelete = &NodeDeleteRequest{}
			}
			if err := m.NodeDelete.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 1504:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NodeDetail", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRaftInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRaftInternal
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRaftInternal
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.NodeDetail == nil {
				m.NodeDetail = &NodeDetailRequest{}
			}
			if err := m.NodeDetail.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRaftInternal(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRaftInternal
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EmptyResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRaftInternal
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EmptyResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EmptyResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipRaftInternal(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRaftInternal
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *InternalAuthenticateRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRaftInternal
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: InternalAuthenticateRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: InternalAuthenticateRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRaftInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRaftInternal
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRaftInternal
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Password", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRaftInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRaftInternal
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRaftInternal
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Password = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SimpleToken", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRaftInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRaftInternal
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRaftInternal
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SimpleToken = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRaftInternal(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRaftInternal
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipRaftInternal(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowRaftInternal
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowRaftInternal
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowRaftInternal
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthRaftInternal
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupRaftInternal
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthRaftInternal
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthRaftInternal        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowRaftInternal          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupRaftInternal = fmt.Errorf("proto: unexpected end of group")
)
